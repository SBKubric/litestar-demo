name: Tests and Linting

on:
  pull_request:
  push:
    branches:
      - main
concurrency:
  group: test-${{ github.head_ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: pre-commit/action@v3.0.1

  test:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create cache file
        run: echo '${{ matrix.python-version }}' > ./matrix-file.txt

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache

      - name: Install and configure Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Test with Coverage
        run: poetry run pytest tests --cov=app --cov-report=xml

      - if: matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  build-docs:
    needs:
      - validate
    # skipping, as docs need to be setup
    if: github.event_name == 'foobar'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache

      - name: Install and configure Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Build docs
        run: poetry run make docs

      - name: Save PR number
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > .pr_number

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-preview
          path: |
            docs/_build/html
            .pr_number

  codeql:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache

      - name: Install and configure Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
